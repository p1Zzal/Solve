7kyu
Find the middle element

As a part of this Kata, you need to create a function that when provided with a triplet, returns the index of the numerical element that lies between the other two elements.

The input to the function will be an array of three distinct numbers (Haskell: a tuple).

For example:

gimme([2, 3, 1]) => 0
2 is the number that fits between 1 and 3 and the index of 2 in the input array is 0.

Another example (just to make sure it is clear):

gimme([5, 10, 14]) => 1
10 is the number that fits between 5 and 14 and the index of 10 in the input array is 1.

배열 triplet 이 주어진다. 해당 변수는 무조건 3개의 element 를 가진 배열을 반환한다.
중간값에 해당하는 값의 index를 찾으면 된다.

///

중간값이니까 변수 newarr 를 새로 만들어서 오름차순으로 정렬해준다음 가운데 값의 index를 triplet 에서 찾게했다.

function gimme (triplet) {
  let newarr = [...triplet].sort((a,b)=>a-b)
  return triplet.indexOf(newarr[1])
}
