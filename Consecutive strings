6kyu
Consecutive strings

You are given an array(list) strarr of strings and an integer k. Your task is to return the first longest string consisting of k consecutive strings taken in the array.

Examples:
strarr = ["tree", "foling", "trashy", "blue", "abcdef", "uvwxyz"], k = 2

Concatenate the consecutive strings of strarr by 2, we get:

treefoling   (length 10)  concatenation of strarr[0] and strarr[1]
folingtrashy ("      12)  concatenation of strarr[1] and strarr[2]
trashyblue   ("      10)  concatenation of strarr[2] and strarr[3]
blueabcdef   ("      10)  concatenation of strarr[3] and strarr[4]
abcdefuvwxyz ("      12)  concatenation of strarr[4] and strarr[5]

Two strings are the longest: "folingtrashy" and "abcdefuvwxyz".
The first that came is "folingtrashy" so 
longest_consec(strarr, 2) should return "folingtrashy".

In the same way:
longest_consec(["zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail"], 2) --> "abigailtheta"
n being the length of the string array, if n = 0 or k > n or k <= 0 return "" (return Nothing in Elm).

Note
consecutive strings : follow one after another without an interruption

매개변수 strarr(문자배열), k 가 주어진다.
strarr 에서 k 만큼 합쳤을 때 길이가 가장 긴 문자를 반환하라.

strarr 이 빈 배열이거나, k 가 0 이거나 k 가 strarr 배열의 길이보다 클 때 빈 문자를 반환해라.
그리고 문자열을 리턴할 때 strarr 에 순서에 맞게 반환되어야한다.
문자가 순서가 바뀌면 안된다.

///

첫번째 풀이
위의 특수사항을 먼저 if 문을 써서 반환값을 넣어줬고,
for문을 써서 해당 문자들을 합친다음 비교해서 result 를 리턴하게 해줬다.
근데 풀어보니까 분명히 다른 방법이 있는것 같은데, 더 쉽게 하는방법이 있을것 같은데 하는 생각이 머릿속에서 지워지지 않았다.

function longestConsec(strarr, k) {
  if(strarr.length < k || strarr.length === 0 || k === 0){
    return ""
  }
  let result = ''
  for(let i=0; i<strarr.length; i++){
    let sum = ''
    for(let j=0; j<k; j++){
      if(strarr[i+j] === undefined){
        break
      }
      sum+=strarr[i+j]
    }
    if(result.length < sum.length){
      result = sum
    }
  }
  return result
}

두번째 풀이
첫번째 와 별다를것이 없다..
그리고 두번째 풀이가 속도가 조금 느리다.

function longestConsec(strarr, k) {
  if(strarr.length < k || strarr.length === 0 || k === 0){
    return ""
  }
  
  let str = []

  for(let i=0; i<strarr.length; i++){
    for(let j=0; j<k; j++){
      str[i] += strarr[i+j]
    }
  }

  return str.map(a => a.replace(/undefined/g, '')).reduce((a,b)=>{
    return a.length < b.length ? b : a
  },'')

}
