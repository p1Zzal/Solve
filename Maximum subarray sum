5kyu
Maximum subarray sum

The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:

maxSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
// should be 6: [4, -1, 2, 1]
Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. 
If the list is made up of only negative numbers, return 0 instead.

Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.

하위배열들의 합 중에서 제일 큰 수를 찾아서 반환하면된다.

///

아래처럼 이중for문을 돌려서 slice한 값을 reduce 한 다음 제일 큰 값을 result 로 넘겨주었다.

var maxSequence = function(arr){
  let result = 0;
  
  for(let i = 0; i<arr.length; i++){
    for(let j = i+1; j<arr.length+1; j++){
      let sum = 0;
      sum = arr.slice(i,j).reduce((a,b) => a+b,0)
      if(sum > result){
        result = sum
      }
    }
  }
  
  return result
}
