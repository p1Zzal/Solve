6kyu
Are they the "same"?

Given two arrays a and b write a function comp(a, b) (orcompSame(a, b)) that checks whether the two arrays have the "same" elements, with the same multiplicities (the multiplicity of a member is the number of times it appears). "Same" means, here, that the elements in b are the elements in a squared, regardless of the order.

Examples
Valid arrays
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]
comp(a, b) returns true because in b 121 is the square of 11, 14641 is the square of 121, 20736 the square of 144, 361 the square of 19, 25921 the square of 161, and so on. It gets obvious if we write b's elements in terms of squares:

a = [121, 144, 19, 161, 19, 144, 19, 11] 
b = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]
Invalid arrays
If, for example, we change the first number to something else, comp is not returning true anymore:

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [132, 14641, 20736, 361, 25921, 361, 20736, 361]
comp(a,b) returns false because in b 132 is not the square of any number of a.

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 36100, 25921, 361, 20736, 361]
comp(a,b) returns false because in b 36100 is not the square of any number of a.

Remarks
a or b might be [] or {} (all languages except R, Shell).
a or b might be nil or null or None or nothing (except in C++, COBOL, Crystal, D, Dart, Elixir, Fortran, F#, Haskell, Nim, OCaml, Pascal, Perl, PowerShell, Prolog, PureScript, R, Racket, Rust, Shell, Swift).
If a or b are nil (or null or None, depending on the language), the problem doesn't make sense so return false.

배열 두 개가 주어지며 array1 이라는 배열에서는 일반 숫자값이 주어지고,
array2 라는 배열에서는 array1 에서의 값의 제곱의 숫자가 주어질 수도 있고, 아닐수도 있다.
만약 두 개의 배열이 똑같다면 true 를 아니라면 false 를 반환하면 된다.

///

일단 null 일 경우를 상정해서 먼저 if문을 썼고, 그 다음 array2를 map을 써서 제곱근을 구해준다음 오름차순으로 정렬해주었다.
array1 도 똑같이 정렬해줘서 JSON.stringify 를 써서 비교해줬다.

function comp(array1, array2){
  if(array1 === null || array2 === null){
    return false
  }
  
  let newarr1 = array2.map(a => Math.sqrt(a)).sort((a,b) => a-b)
  let newarr2 = array1.sort((a,b) => a-b)
  return JSON.stringify(newarr1) === JSON.stringify(newarr2)
}
