6kyu
Street Fighter 2 - Character Selection

Short Intro

Some of you might remember spending afternoons playing Street Fighter 2 in some Arcade back in the 90s or emulating it nowadays with the numerous emulators for retro consoles.

Can you solve this kata? Suuure-You-Can!

UPDATE: a new kata's harder version is available here.

The Kata

You'll have to simulate the video game's character selection screen behaviour, more specifically the selection grid. Such screen looks like this:

Selection Grid Layout in text:

| Ryu  | E.Honda | Blanka  | Guile   | Balrog | Vega    |
| Ken  | Chun Li | Zangief | Dhalsim | Sagat  | M.Bison |
Input

the list of game characters in a 2x6 grid;
the initial position of the selection cursor (top-left is (0,0));
a list of moves of the selection cursor (which are up, down, left, right);
Output

the list of characters who have been hovered by the selection cursor after all the moves (ordered and with repetition, all the ones after a move, whether successful or not, see tests);
Rules

Selection cursor is circular horizontally but not vertically!

As you might remember from the game, the selection cursor rotates horizontally but not vertically; 
that means that if I'm in the leftmost and I try to go left again I'll get to the rightmost (examples: from Ryu to Vega, from Ken to M.Bison) and vice versa from rightmost to leftmost.

Instead, if I try to go further up from the upmost or further down from the downmost, 
I'll just stay where I am located (examples: you can't go lower than lowest row: Ken, Chun Li, Zangief, Dhalsim, Sagat and M.Bison in the above image; 
you can't go upper than highest row: Ryu, E.Honda, Blanka, Guile, Balrog and Vega in the above image).

Test

For this easy version the fighters grid layout and the initial position will always be the same in all tests, only the list of moves change.

Notice: changing some of the input data might not help you.

Examples

fighters = [
  ["Ryu", "E.Honda", "Blanka", "Guile", "Balrog", "Vega"],
  ["Ken", "Chun Li", "Zangief", "Dhalsim", "Sagat", "M.Bison"]
]
initial_position = (0,0)
moves = ['up', 'left', 'right', 'left', 'left']
then I should get:

['Ryu', 'Vega', 'Ryu', 'Vega', 'Balrog']
as the characters I've been hovering with the selection cursor during my moves. Notice: Ryu is the first just because it "fails" the first up See test cases for more examples.

fighters = [
  ["Ryu", "E.Honda", "Blanka", "Guile", "Balrog", "Vega"],
  ["Ken", "Chun Li", "Zangief", "Dhalsim", "Sagat", "M.Bison"]
]
initial_position = (0,0)
moves = ['right', 'down', 'left', 'left', 'left', 'left', 'right']
Result:

['E.Honda', 'Chun Li', 'Ken', 'M.Bison', 'Sagat', 'Dhalsim', 'Sagat']
OFF-TOPIC

Some music to get in the mood for this kata :

매개변수 moves 를 참고하여 fighters 배열에 있는 캐릭터를 반환해주면된다.
position 함수는 0,0 에서 시작한다.

///

for문을 돌리면서 if문으로 newposition 을 움직이게 만들었다.
근데 이렇게 하니까 정상적으로 작동은 되나 너무 무식한것 같아서 생각을 계속 해봤는데, 혹시 객체로 담아서도 저 계산이 가능한지 해보았다.
근데 계산이 안되더라.


function streetFighterSelection(fighters, position, moves){
  let newposition = position
  let result = []
  
  for(let i=0; i<moves.length; i++){
    if(moves[i] === 'up'){
      newposition[0] === 0 ? newposition[0] : newposition[0]--
      result.push(fighters[newposition[0]][newposition[1]])
    }else if(moves[i] === 'down'){
      newposition[0] === fighters.length -1 ? newposition[0] : newposition[0]++
      result.push(fighters[newposition[0]][newposition[1]])
    }else if(moves[i] === 'left'){
      newposition[1] === 0 ? newposition[1] = fighters[newposition[0]].length-1 : newposition[1]--
      result.push(fighters[newposition[0]][newposition[1]])
    }else if(moves[i] === 'right'){
       newposition[1] === fighters[newposition[0]].length-1 ? newposition[1] = 0 : newposition[1]++
      result.push(fighters[newposition[0]][newposition[1]])
    }
  }

  
  return result
 }
 
 그래서 다른사람이 한 문제풀이를 봤는데
 
 function streetFighterSelection(fighters, position, moves){

  const boundY = fighters.length - 1;
  const boundX = fighters[0].length - 1;

  let [y, x] = position;

  const controls = {
    right: () => x === boundX ? x = 0 : x++,
    left: () => x ? x-- : x = boundX,
    up: () => y ? y-- : y,
    down: () => y < boundY ? y++ : y
  };
  
  return moves.map(move => {
    controls[move]();
    return fighters[y][x];
  });
}

이렇게 객체에 담아서 한 사람이 있더라.
또 한번 배움을 얻은것 같다.


