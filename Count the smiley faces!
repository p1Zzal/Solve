6kyu
Count the smiley faces!

Given an array (arr) as an argument complete the function countSmileys that should return the total number of smiling faces.

Rules for a smiling face:

Each smiley face must contain a valid pair of eyes. Eyes can be marked as : or ;
A smiley face can have a nose but it does not have to. Valid characters for a nose are - or ~
Every smiling face must have a smiling mouth that should be marked with either ) or D
No additional characters are allowed except for those mentioned.

Valid smiley face examples: :) :D ;-D :~)
Invalid smiley faces: ;( :> :} :]

Example
countSmileys([':)', ';(', ';}', ':-D']);       // should return 2;
countSmileys([';D', ':-(', ':-)', ';~)']);     // should return 3;
countSmileys([';]', ':[', ';*', ':$', ';-D']); // should return 1;


Note
In case of an empty array return 0. 
You will not be tested with invalid input (input will always be an array). 
Order of the face (eyes, nose, mouth) elements will always be the same.


웃는 얼굴의 개수를 찾으면 된다.
눈은 :, ; 만 쓸 수 있고
코는 있을수도 있고 없을수도 있다. 코는 -, ~ 만 쓸 수 있다.
웃는 입은 ), D 이다.

///

총 조합된 갯수가 몇개 되지않아서 아래와 같이 노가다로 풀어보았다.
맞는 값들을 쭉 배열에 넣고 indexOf 를 해서 index 가 0 이상이면 result ++ 를 해줬다.

function countSmileys(arr) {
  let trueKeys = [':D', ':)', ';D', ';)', ':~D', ':~)', ';~D', ';~)', ':-D', ':-)', ';-D', ';-)']
  let result = 0
  for(let i = 0; i < arr.length; i++){
    if(trueKeys.indexOf(arr[i]) > -1){
      result ++
    }
  }
  return result
}

다른 사람의 답

function countSmileys(arr) {
  return arr.filter(x => /^[:;][-~]?[)D]$/.test(x)).length;
}

filter를 써서 test 에서 해당 정규표현식에 test값이 true 인것만 걸러서 길이를 반환해줬다.

내 해답: 16ms,
다른 사람의 해답: 16ms

속도차이에서는 똑같다고 나오는데 확실히 주먹구구 식으로 한 것보다는 훨씬 편안해 보인다.
